@using ViewModels;
@using Web.Extensions;
@using Enums;
@model FCOLogModifyViewModel
@{
    Layout = null;
    var isAdmin = User.IsInRole("SuperAdmin") || User.IsInRole("Administrator");
    var labourSection = Model.FCOSections.Where(x => x.SectionType == FCOSectionCatalog.Labour).ToList();
    var equipmentSection = Model.FCOSections.Where(x => x.SectionType == FCOSectionCatalog.Equipment).ToList();
}
<div class="row">
    <div class="col-lg-12">
        <div class="row">
            <div class="col-lg-4">
                <div class="mb-3">
                    <label asp-for="Date" class="form-label fw-600"></label>
                    <input asp-for="Date" type="date" class="form-control" />
                    <span asp-validation-for="Date" class="validation-invalid-label"></span>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="mb-3">
                    <partial name="~/Views/Shared/Select2/_Contractor.cshtml" for="Contractor" view-data='@new ViewDataDictionary(ViewData) { { "Label", "Requestor Name/Contractor" } }' />
                </div>
            </div>
            <div class="col-lg-4">
                <div class="mb-3">
                    <partial name="~/Views/Shared/Select2/_Department.cshtml" for="Department" view-data='@new ViewDataDictionary(ViewData) { { "Label", "Department/Extension" } }' />
                </div>
            </div>
            <div class="col-lg-4">
                <div class="mb-3">
                    <partial name="~/Views/Shared/Select2/_Unit.cshtml" for="Unit" />
                </div>
            </div>
            <div class="col-lg-4">
                <div class="mb-3">
                    <label asp-for="EquipmentNumber" class="form-label fw-600"></label>
                    <input asp-for="EquipmentNumber" type="text" class="form-control" />
                    <span asp-validation-for="EquipmentNumber" class="validation-invalid-label"></span>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="mb-3">
                    <label asp-for="Location" class="form-label fw-600"></label>
                    <input asp-for="Location" class="form-control" />
                    <span asp-validation-for="Location" class="validation-invalid-label"></span>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="mb-3">
                    <label asp-for="DescriptionOfFinding" class="form-label fw-600"></label>
                    <textarea asp-for="DescriptionOfFinding" type="text" class="form-control">@Model.DescriptionOfFinding</textarea>
                    <span asp-validation-for="DescriptionOfFinding" class="validation-invalid-label"></span>
                </div>
            </div>
            <div class="col-lg-6" id="file-container">
                <label asp-for="Attachments" class="form-label fw-600"></label>
                <input type="file" id="file" asp-for="Attachments" class="form-control" />
                <span asp-validation-for="Attachments" class="validation-invalid-label"></span>
            </div>
            <div class="col-lg-4">
                <div class="mb-3">
                    <label class="form-label fw-600">Shutdown required?</label>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" asp-for="ShutdownRequired" value="true">
                        <label class="form-check-label" asp-for="ShutdownRequired">Yes</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" asp-for="ShutdownRequired" value="false">
                        <label class="form-check-label" asp-for="ShutdownRequired">No</label>
                    </div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="mb-3">
                    <label class="form-label fw-600">Scaffold Required?</label>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" asp-for="ScaffoldRequired" value="true">
                        <label class="form-check-label" asp-for="ScaffoldRequired">Yes</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" asp-for="ScaffoldRequired" value="false">
                        <label class="form-check-label" asp-for="ScaffoldRequired">No</label>
                    </div>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="mb-3">
                    <label asp-for="AdditionalInformation" class="form-label fw-600"></label>
                    <textarea asp-for="AdditionalInformation" type="text" class="form-control">@Model.AdditionalInformation</textarea>
                    <span asp-validation-for="AdditionalInformation" class="validation-invalid-label"></span>
                </div>
            </div>
            <div class="col-md-12 mt-3">
                <div class="form-group costs-inputs-container row">
                    <h4 class="col-md-12">Labor</h4>
                    <span class="labour-override-type-td col-md-3">
                        <label class="form-label fw-600">Type<span style="color:red"> *</span></label>
                        <select asp-items="Html.GetEnumSelectList(typeof (OverrideTypeCatalog))" id="labour-override-type" class="labour-type form-control simple-dd"></select>
                    </span>
                    <span class="labour-head-count-td col-md-2">
                        <label class="form-label fw-600">MN<span style="color:red"> *</span></label>
                        <input type="number" name="head-count" value="" id="head-count" class="form-control head-count cost" placeholder="Head Count" />
                    </span>
                    <span class="labour-hours-td col-md-2">
                        <label class="form-label fw-600">DU<span style="color:red"> *</span></label>
                        <input type="number" name="labour-hours" value="" id="labour-hours" class="form-control labour-hours cost" placeholder="Hours" />
                    </span>
                    <span class="labour-craft-skill-td col-md-3">
                        @*<partial name="~/Views/Shared/Select2/_CraftSkill.cshtml" model='@(new ViewModels.OverrideLogs.CraftSkillBriefViewModel())' />*@
                        @await Html.PartialAsync("~/Views/Shared/Select2/_CraftSkill.cshtml", (new ViewModels.OverrideLogs.CraftSkillBriefViewModel()), "CraftSkill")
                    </span>

                    <span class="text-center col-md-2">
                        <label class="form-label fw-600 w-100">Add</label>
                        <button type="button" class="add-cost btn-circle btn-sm" style="height: calc(1.5715em + 0.875rem + 2px);"><i class="icon-plus2"></i></button>
                    </span>
                </div>
            </div>
            <div class="table-responsive my-3" id="labour-table">
                <table class="table text-nowrap">
                    <thead>
                        <tr>
                            <th>Type</th>
                            <th>Craft</th>
                            <th>MN</th>
                            <th>DU</th>
                            @if (!User.IsInRole(RolesCatalog.Employee.ToString()))
                            {
                                <th>Estimate</th>
                            }
                            <th class="text-center" style="width: 20px;"><i class="icon-arrow-down12"></i></th>
                        </tr>
                    </thead>
                    <tbody class="labour-tbody">
                        @for (var i = 0; i < labourSection.Count(); i++)
                        {
                            @await Html.PartialAsync("~/Views/FCOLog/_LabourSectionRow.cshtml", labourSection[i], new ViewDataDictionary(ViewData) { { "RowNumber", i } })
                        }
                    </tbody>
                </table>
            </div>
            @await Html.PartialAsync("~/Views/FCOLog/_SectionTable.cshtml", equipmentSection, new ViewDataDictionary(ViewData) { { "Section", "material" }, { "SectionName", "Material" } })
            @await Html.PartialAsync("~/Views/FCOLog/_SectionTable.cshtml", equipmentSection, new ViewDataDictionary(ViewData) { { "Section", "equipment" }, { "SectionName", "Equipment" } })
            @await Html.PartialAsync("~/Views/FCOLog/_SectionTable.cshtml", equipmentSection, new ViewDataDictionary(ViewData) { { "Section", "shop" }, { "SectionName", "Shop" } })


            <div class="col-lg-4">
                <div class="mb-3">
                    <partial name="~/Views/Shared/Select2/_FCOReason.cshtml" for="FCOReason" />
                </div>
            </div>
            <div class="col-lg-4">
                <div class="mb-3">
                    <label class="form-label fw-600">Others Documentation Required</label>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" asp-for="AnalysisOfAlternatives">
                        <label class="form-check-label" asp-for="AnalysisOfAlternatives"></label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" asp-for="EquipmentFailureReport">
                        <label class="form-check-label" asp-for="EquipmentFailureReport"></label>
                    </div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="mb-3">
                    <label class="form-label fw-600" asp-for="DuringExecution"></label>
                    <select asp-for="DuringExecution" asp-items="Html.GetEnumSelectList(typeof (DuringExecutionCatalog))" id="during-execution" class="form-control" data-placeholder="Select During Execution"><option></option></select>
                    <span asp-validation-for="DuringExecution" class="validation-invalid-label"></span>
                </div>
            </div>

            @*<div class="col-lg-6" id="link-container" style="display:none;">
                    <label asp-for="Url" class="form-label fw-600">Link</label>
                    <input type="url" id="url" asp-for="Url" class="form-control" />
                    <span asp-validation-for="Url" class="validation-invalid-label"></span>
                </div>*@
            <input asp-for="Approver.Id" type="hidden" />
        </div>
    </div>
</div>

<input asp-for="Status" type="hidden" id="status-id" />
<input asp-for="Employee.Id" type="hidden" />
<input asp-for="Id" type="hidden" />

<script>$(function () {
    //onAttachmentTypeChange($("#AttachmentType").val());

        $('#requester-id').on('change.select2', function (e) {
            if ($(this).select2('data')[0] === undefined) {
                $("#requestor-company").val("");
            }
            else {
                $("#requestor-company").val($(this).select2('data')[0].additionalAttributesModel.Company.Name);
            }
        });

        //$(document).on('change', "#AttachmentType", function () {
        //    onAttachmentTypeChange($(this).val());
        //});

    $('#requester-id').off('change.select2');
    $('#requester-id').on('change.select2', function (e) {
        if ($(this).select2('data')[0] === undefined) {
            $("#requestor-company").val("");
            $("#company-id").val("");
        }
        else {
            $("#requestor-company").val($(this).select2('data')[0].additionalAttributesModel.Company.Name);
            $("#company-id").val($(this).select2('data')[0].additionalAttributesModel.Company.Id);
        }
    });

    $('#delay-reason').on('change', function () {
        DelayReasonChanged();
    });
    $(document).off("click", ".add-cost");
    $(document).on("click", ".add-cost", function () {
        AddCost(this);
    });
    $(document).off("click", ".remove-cost");
    $(document).on("click", ".remove-cost", function () {
        $(this).closest("tr").remove();
        RefreshInputIndexes("#labour-table tr", "labour-row", "FCOSections");
    });

});


    function onAttachmentTypeChange(selectedValue){
        if (@((int)AttachmentTypeCatalog.File)== selectedValue) {
            $("#link-container").hide();
            $("#file-container").show();
        }
        else {
            $("#file-container").hide();
            $("#link-container").show();
        }
    }
    function AddSectionElement(element, section, sectionType, ajaxUrl, tbodySelector, resetContainers, collectionType) {
        var thisElement = $(element);
        var sectionName = $("#"+section+"-name").val();
        var costHours = $("#" + section +"-hours").val();
        var headCount = $("#" + section +"-head-count").val();
        var rate = $("#" + section + "-rate").val();
        if (sectionName != null && costHours != null && headCount != "" && headCount > 0 && costHours != "" && costHours > 0 && rate != null && rate > 0) {
            var rowNumber = $("." + section + "-row").length;
            var obj = {
                'Name': sectionName,
                'MN': headCount,
                'DU': costHours,
                'Rate': rate,
                'SectionType': sectionType
            }
            AddGridRow(obj, rowNumber, ajaxUrl, tbodySelector, section, collectionType);
            debugger;
            ResetInputs(resetContainers, []);
        }
        else {
            FireSwal("MN, DU are required fields.");
        }
    }
    function AddCost(element) {
        var thisElement = $(element);
        var overrideType = $("#labour-override-type").val();
        var costHours = $("#labour-hours").val();
        var headCount = $("#head-count").val();
        var costCraftId = $('#craft-skill-id').select2('data')[0].id;
        var costCraftName = $('#craft-skill-id').select2('data')[0].text;
        if (overrideType !== null && overrideType !== "" && costHours != null && headCount != "" && headCount > 0 && costHours != "" && costHours > 0 && costCraftId != null && costCraftId != "") {
            var rowNumber = $(".labour-row").length;
            var obj = {
                'OverrideType': overrideType,
                'CraftSkill': {
                    'Id': costCraftId,
                    'Name': costCraftName,
                    'STRate': $("#craft-skill-id").select2('data')[0].additionalAttributesModel.STRate,
                    'OTRate': $("#craft-skill-id").select2('data')[0].additionalAttributesModel.OTRate,
                    'DTRate': $("#craft-skill-id").select2('data')[0].additionalAttributesModel.DTRate,
                },
                'MN': headCount,
                'DU': costHours
            }
            AddGridRow(obj, rowNumber, "/FCOLog/_LabourSectionRow", "labour-table tbody");
            ResetInputs([".costs-inputs-container"], ["#craft-skill-id"]);
        }
        else {
            FireSwal("OverrideType, Craft, Head Count & Hours are required fields.");
        }
    }
    function FireSwal(errorMessage) {
        swal.fire({
            title: 'Validation Error',
            text: errorMessage,
            type: 'error',
            showCancelButton: true,
            confirmButtonText: "Okay",
            cancelButtonText: "Cancel",
            confirmButtonClass: 'btn btn-success',
            cancelButtonClass: 'btn btn-danger',
            buttonsStyling: false
        });
    }
    function ResetInputs(containers, select2Elements) {
        //to reset container elements
        $.each(containers, function (index, selector) {
            $(selector).find(':input').val(null);
        });
        //to reset select 2 elements
        $.each(containers, function (index, selector) {
                $(selector).val('').trigger('change')
        });
    }

    function AddGridRow(obj, rowNumber, url, tbodyId, rowClass='', collectionType='') {
        $.ajax({
            url: url,
            type: "post",
            data: { model: obj, 'rowNumber': rowNumber, 'rowClass': rowClass, 'collectionType': collectionType },
            dataType: "html",
            success: function (response) {
                console.log(response);
                $('#' + tbodyId).append(response);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(textStatus, errorThrown);
            }
        });
    }

    function RefreshInputIndexes(trSelector, rowPrefix, collectionName) {
        var rowIndex = 0;
        $.each($(trSelector), function () {

            if ($(this).find('input').length > 1) {
                var id = $(this).attr("id");
                if (id != null && id != "") {
                    $(this).attr("id", rowPrefix +"-"+ rowIndex);
                }
                $.each($(this).find('input'), function () {
                    if ($(this).attr('name').split(".").length > 2) {

                        $(this).attr("name", collectionName+"[" + rowIndex + "]." + $(this).attr('name').split(".")[1] + "." + $(this).attr('name').split(".")[2]);
                    }
                    else {
                        $(this).attr("name", collectionName+"[" + rowIndex + "]." + $(this).attr('name').split(".")[1]);
                    }
                });
                rowIndex++;
            }
        });
    }</script>
