@using Enums;
@using ViewModels.OverrideLogs.ORLog;
@using Web.Extensions;
@model ORLogModifyViewModel
@{
    Layout = null;
    var isAdmin = User.IsInRole("SuperAdmin") || User.IsInRole("Administrator");
    //this check is placed so that no one can change Approver unless it is an Admin and Log is updated and Status is Pending and inProcess
    //var canModifyApprover = isAdmin && (Model.Status == Status.Pending || Model.Status == Status.InProcess) && Model.Id > 0;
    var canModifyApprover = Model.Status == Status.Pending || Model.Status == Status.InProcess;

}
<div class="row">
    <div class="col-lg-12">
        <div class="row">

            <div class="col-lg-4">
                <div class="mb-3">
                    <partial name="~/Views/Shared/Select2/_Department.cshtml" for="Department" />
                </div>
            </div>

            <div class="col-lg-4">
                <div class="mb-3">
                    <partial name="~/Views/Shared/Select2/_Unit.cshtml" for="Unit" />
                </div>
            </div>
            @if (canModifyApprover)
            {
                <div class="col-lg-4">
                    <div class="mb-3">
                        <partial name="~/Views/Shared/Select2/_Approver.cshtml" for="Approver" view-data='new ViewDataDictionary(ViewData) { { "Id", "approver-id"}, { "UserTitle", "Approver"}, {"Type", "Approver"}, {"UnitId","unit-id"} }' />
                    </div>
                </div>
            }
            else
            {
                <input asp-for="Approver.Id" type="hidden" />
            }
            <div class="col-lg-4">
                <div class="mb-3">
                    <partial name="~/Views/Shared/Select2/_Shift.cshtml" for="Shift" />
                </div>
            </div>
            <div class="col-lg-4">
                <div class="mb-3">
                    <label asp-for="WorkCompletedDate" class="form-label fw-600"></label>
                    <input asp-for="WorkCompletedDate" type="date" class="form-control" />
                    <span asp-validation-for="WorkCompletedDate" class="validation-invalid-label"></span>
                </div>
            </div>
            @* <div class="col-lg-4">
                <div class="mb-3">
                <partial name="~/Views/Shared/Select2/_RequestReason.cshtml" for="ReasonForRequest" />
                </div>
                </div>*@
            <div class="col-lg-4">
                <div class="mb-3">
                    <label asp-for="WorkScope" class="form-label fw-600"></label>
                    <input asp-for="WorkScope" type="text" class="form-control" />
                    <span asp-validation-for="WorkScope" class="validation-invalid-label"></span>
                </div>
            </div>
            @*            <div class="col-lg-4">
                <div class="mb-3">
                <partial name="~/Views/Shared/Select2/_DelayType.cshtml" for="DelayType" />
                </div>
                </div>*@
            <div class="col-lg-12">
                <div class="mb-3">
                    <label asp-for="Reason" class="form-label fw-600"></label>
                    <input asp-for="Reason" type="text" class="form-control" />
                    <span asp-validation-for="Reason" class="validation-invalid-label"></span>
                </div>
            </div>
            @* <div class="col-lg-6">
                <div class="mb-3">
                <label class="form-label fw-600">Delay Reason</label>
                <select asp-for="DelayReason" asp-items="Html.GetEnumSelectList(typeof (DelayReasonCatalog)).OrderBy(x=>x.Text)" id="delay-reason" class="form-control"></select>
                <span asp-validation-for="DelayReason" class="validation-invalid-label"></span>
                </div>
                </div>

                <div class="col-lg-6" id="shift-delay-container">
                <div class="mb-3">
                <partial name="~/Views/Shared/Select2/_ShiftDelay.cshtml" for="ShiftDelay" />
                </div>
                </div>
                <div class="col-lg-6" id="rework-delay-container">
                <div class="mb-3">
                <partial name="~/Views/Shared/Select2/_ReworkDelay.cshtml" for="ReworkDelay" />
                </div>
                </div>
                <div class="col-lg-6" id="start-of-work-delay-container">
                <div class="mb-3">
                <partial name="~/Views/Shared/Select2/_StartOfWorkDelay.cshtml" for="StartOfWorkDelay" />
                </div>
                </div>*@

            @if (isAdmin)
            {
                <div class="col-lg-6">
                    <div class="mb-3">
                        <partial name="~/Views/Shared/Select2/_Employee.cshtml" for="Employee" view-data='@new ViewDataDictionary(ViewData) { { "Id", "requester-id" }, { "Heading", "Requester" } }' />
                    </div>
                </div>
            }
            else
            {
                <input asp-for="Employee.Id" type="hidden" />
            }

            @if (!User.IsInRole(RolesCatalog.Employee.ToString()))
            {
                <div class="col-lg-6">
                    <partial name="~/Views/Shared/Select2/_Company.cshtml" for="Company" />
                </div>
            }
            <div class="col-lg-6">
                <div class="mb-3">
                    <label asp-for="PoNumber" class="form-label fw-600"></label>
                    <input asp-for="PoNumber" type="number" class="form-control" />
                    <span asp-validation-for="PoNumber" class="validation-invalid-label"></span>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="mb-3">
                    <label asp-for="EmployeeNames" class="form-label fw-600"></label>
                    <input asp-for="EmployeeNames" type="text" class="form-control" />
                    <span asp-validation-for="EmployeeNames" class="validation-invalid-label"></span>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="mb-3">
                    <label asp-for="ClippedEmployees" class="form-label fw-600"></label>
                    <input type="file" id="clipped-employees" asp-for="ClippedEmployees.File" class="form-control" accept="image/*" />
                    <span asp-validation-for="ClippedEmployees" class="validation-invalid-label"></span>
                </div>
            </div>

            @* <div class="col-lg-12">
                <div class="mb-3">
                <label asp-for="Description" class="form-label fw-600"></label>
                <input asp-for="Description" type="text" class="form-control" />
                <span asp-validation-for="Description" class="validation-invalid-label"></span>
                </div>
                </div>*@


            @*<input asp-for="Approver.Id" type="hidden" />*@

            <div class="col-md-12 mt-3">
                <div class="form-group costs-inputs-container row">
                    <h4 class="col-md-12">Costs</h4>

                    <span class="cost-st-hours-td col-md-2">
                        <label class="form-label fw-600">ST Hours<span style="color:red"> *</span></label>
                        <input type="number" name="cost-st-hours" id="cost-st-hours" class="form-control cost-st-hours cost" placeholder="ST Hours" />
                    </span>

                    <span class="cost-ot-hours-td col-md-2">
                        <label class="form-label fw-600">OT Hours<span style="color:red"> *</span></label>
                        <input type="number" name="cost-ot-hours" id="cost-ot-hours" class="form-control cost-ot-hours cost" placeholder="OT Hours" />
                    </span>

                    <span class="cost-dt-hours-td col-md-2">
                        <label class="form-label fw-600">DT Hours<span style="color:red"> *</span></label>
                        <input type="number" name="cost-dt-hours" id="cost-dt-hours" class="form-control cost-dt-hours cost" placeholder="DT Hours" />
                    </span>

                    <span class="cost-craft-skill-td col-md-2">
                        @await Html.PartialAsync("~/Views/Shared/Select2/_CraftSkill.cshtml", (new ViewModels.OverrideLogs.CraftSkillBriefViewModel()), "CraftSkill")
                    </span>

                    <span class="cost-head-count-td col-md-2">
                        <label class="form-label fw-600">Head Count<span style="color:red"> *</span></label>
                        <input type="text" name="head-count" value="" id="head-count" class="form-control head-count cost" placeholder="Head Count" />
                    </span>

                    <span class="text-center col-md-2">
                        <label class="form-label fw-600 w-100">Add</label>
                        <button type="button" class="add-cost btn-circle btn-sm" style="height: calc(1.5715em + 0.875rem + 2px);"><i class="icon-plus2"></i></button>
                    </span>
                </div>
            </div>
            <div class="table-responsive my-3" id="cost-table">
                <table class="table text-nowrap">
                    <thead>
                        <tr>
                            <th>ST Hours</th>
                            <th>OT Hours</th>
                            <th>DT Hours</th>
                            <th>Craft</th>
                            <th>Head Count</th>
                            @if (!User.IsInRole(RolesCatalog.Employee.ToString()))
                            {
                                <th>Cost</th>
                            }
                            <th class="text-center" style="width: 20px;"><i class="icon-arrow-down12"></i></th>
                        </tr>
                    </thead>
                    <tbody class="cost-tbody">
                        @for (var i = 0; i < Model.Costs.Count(); i++)
                        {
                            @await Html.PartialAsync("~/Views/OverrideLog/_CostRow.cshtml", Model.Costs[i], new ViewDataDictionary(ViewData) { { "RowNumber", i } })
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<input asp-for="Id" type="hidden" />
<input asp-for="Employee.Id" type="hidden" />
<input asp-for="Company.Id" type="hidden" />

<script>$(function () {
        DelayReasonChanged();
        $('#requester-id').off('change.select2');
        $('#requester-id').on('change.select2', function (e) {
            if ($(this).select2('data')[0] === undefined) {
                $("#requestor-company").val("");
                $("#company-id").val("");
            }
            else {
                $("#requestor-company").val($(this).select2('data')[0].additionalAttributesModel.Company.Name);
                $("#company-id").val($(this).select2('data')[0].additionalAttributesModel.Company.Id);
            }
        });

        $('#delay-reason').on('change', function () {
            DelayReasonChanged();
        });
        $(document).off("click", ".add-cost");
        $(document).on("click", ".add-cost", function () {
            AddCost(this);
        });
        $(document).off("click", ".remove-cost");
        $(document).on("click", ".remove-cost", function () {
            $(this).closest("tr").remove();
            RefreshInputIndexes();
        });
        //$(document).off("change", "#clipped-employees-temp");
        //$(document).on("change", "#clipped-employees-temp", function (e) {
        //    var imgFile = e.target.files[0];
        //    if (imgFile) {
        //        // Get the original image size
        //        new Compressor(imgFile, {
        //            quality: 0.5,
        //            maxWidth: 1200,
        //            success(result) {
        //                // Convert the compressed image data to Base64
        //                var reader = new FileReader();
        //                reader.readAsDataURL(result);
        //                reader.onloadend = function () {
        //                    var base64data = reader.result;

        //                    // Set the Base64 data as the value of the hidden input
        //                    $("#clipped-employees").val(base64data);
        //                };
        //            }
        //        });
        //    }
        //});
    });
    function AddCost(element) {
        var thisElement = $(element);
        var costSTHours = parseToFloat($("#cost-st-hours").val());
        var costOTHours = parseToFloat($("#cost-ot-hours").val());
        var costDTHours = parseToFloat($("#cost-dt-hours").val());
        var headCount = $("#head-count").val();
        var costCraftId = $('#craft-skill-id').select2('data')[0].id;
        var costCraftName = $('#craft-skill-id').select2('data')[0].text;
        var totalCost = costSTHours + costOTHours + costDTHours;
        if (totalCost != null && headCount != "" && headCount > 0 && totalCost != "" && totalCost > 0 && costCraftId != null && costCraftId != "") {
            var rowNumber = $(".cost-row").length;
            var obj = {
                'CraftSkill': {
                    'Id': costCraftId,
                    'Name': costCraftName,
                    'STRate': $("#craft-skill-id").select2('data')[0].additionalAttributesModel.STRate,
                    'OTRate': $("#craft-skill-id").select2('data')[0].additionalAttributesModel.OTRate,
                    'DTRate': $("#craft-skill-id").select2('data')[0].additionalAttributesModel.DTRate,
                },
                'HeadCount': headCount,
                'STHours': costSTHours,
                'OTHours': costOTHours,
                'DTHours': costDTHours
            }
            AddCosttRow(obj, rowNumber);
            ResetCostInputs();
        }
        else {
            swal.fire({
                title: 'Validation Error',
                text: "Craft, Head Count and Hours are required fields.",
                type: 'error',
                showCancelButton: true,
                confirmButtonText: "Okay",
                cancelButtonText: "Cancel",
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            });
        }
    }
    function ResetCostInputs() {
        $('.costs-inputs-container').find(':input').val(null);
        $("#craft-skill-id").val('').trigger('change');
    }

    function parseToInt(input) {
        // Use parseInt to attempt to parse the input as an integer
        const parsedInt = parseInt(input);

        // Check if parsedInt is NaN
        if (isNaN(parsedInt)) {
            return 0; // Return 0 if it's NaN
        } else {
            return parsedInt; // Return the parsed integer if it's a valid number
        }
    }
    function parseToFloat(input) {
        // Use parseFloat to attempt to parse the input as a float
        const parsedFloat = parseFloat(input);

        // Check if parsedFloat is NaN
        if (isNaN(parsedFloat)) {
            return 0.0; // Return 0.0 if it's NaN
        } else {
            return parsedFloat; // Return the parsed float if it's a valid number
        }
    }

    function AddCosttRow(obj, rowNumber) {
        $.ajax({
            url: "/OverrideLog/_CostRow",
            type: "post",
            data: { model: obj, 'rowNumber': rowNumber },
            dataType: "html",
            success: function (response) {
                //console.log(response);
                $('#cost-table tbody').append(response);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(textStatus, errorThrown);
            }
        });
    }

    function RefreshInputIndexes() {
        var rowIndex = 0;
        $.each($("#cost-table tr"), function () {

            if ($(this).find('input').length > 1) {
                var id = $(this).attr("id");
                if (id != null && id != "") {
                    $(this).attr("id", "cost-row-" + rowIndex);
                }
                $.each($(this).find('input'), function () {
                    if ($(this).attr('name').split(".").length > 2) {

                        $(this).attr("name", "Costs[" + rowIndex + "]." + $(this).attr('name').split(".")[1] + "." + $(this).attr('name').split(".")[2]);
                    }
                    else {
                        $(this).attr("name", "Costs[" + rowIndex + "]." + $(this).attr('name').split(".")[1]);
                    }
                });
                rowIndex++;
            }
        });
    }
    function DelayReasonChanged() {
        var ele = $("#delay-reason");
        if ($(ele).val() === '0') {
            $('#shift-delay-container').hide();
            $('#rework-delay-container').hide();
            $('#start-of-work-delay-container').show();
        } else if ($(ele).val() === '1') {
            $('#shift-delay-container').show();
            $('#rework-delay-container').hide();
            $('#start-of-work-delay-container').hide();
        } else if ($(ele).val() === '2') {
            $('#shift-delay-container').hide();
            $('#rework-delay-container').show();
            $('#start-of-work-delay-container').hide();
        }
    }</script>
